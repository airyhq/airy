apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.name }}"
  labels:
    app: "{{ .Values.name }}"
    type: sources
    core.airy.co/managed: "true"
    core.airy.co/mandatory: "{{ .Values.mandatory }}"
    core.airy.co/component: "{{ .Values.name }}"
spec:
  replicas: {{ if .Values.enabled }} 1 {{ else }} 0 {{ end }}
  selector:
    matchLabels:
      app: "{{ .Values.name }}"
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: "{{ .Values.name }}"
    spec:
      containers:
      - name: app
        image: "{{ .Values.global.containerRegistry}}/{{ .Values.image }}:{{ default .Chart.Version .Values.global.appImageTag }}"
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: security
          - configMapRef:
              name: "{{ .Values.name }}"
        env:
        - name: jwtSecret
          valueFrom:
            configMapKeyRef:
              name: security
              key: jwtSecret
        ports:
          - name: service
            containerPort: {{ .Values.servicePort }}
            protocol: TCP
        livenessProbe:
          tcpSocket:
            port: {{ .Values.servicePort }}
          initialDelaySeconds: 120
          periodSeconds: 10
          failureThreshold: 3
{{ if .Values.global.kafkaCertAuth }}
        volumeMounts:
        - name: kafka-config-certs
          mountPath: /opt/kafka/certs
{{ end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
      initContainers:
      - name: wait
        image: "{{ .Values.global.busyboxImage }}"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "/opt/provisioning/wait-for-service.sh"]
        env:
        - name: SERVICE_NAME
          value: "{{ .Values.ksqldbHost }}"
        - name: SERVICE_PORT
          value: "{{ .Values.ksqldbPort }}"
        volumeMounts:
        - name: provisioning-scripts
          mountPath: /opt/provisioning
      volumes:
        - name: provisioning-scripts
          configMap:
            name: provisioning-scripts
{{ if .Values.global.kafkaCertAuth }}
        - name: kafka-config-certs
          configMap:
            name: kafka-config-certs
{{ end }}