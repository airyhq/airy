apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-auth
  namespace: {{ .Values.global.namespace }}
  labels:
    app: api-auth
    type: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-auth
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: api-auth
    spec:
      containers:
      - name: app
        image: "{{ .Values.global.containerRegistry}}/{{ .Values.image }}:{{ .Values.global.appImageTag }}"
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: api-config
        env:
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: DB_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_PASSWORD
        - name: DB_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_ENDPOINT
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
            httpHeaders:
              - name: Health-Check
                value: health-check
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 3
      initContainers:
      - name: wait
        image: busybox
        command: ["/bin/sh", "/opt/provisioning/wait-for-service-url.sh"]
        env:
        - name: SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_ENDPOINT
        volumeMounts:
        - name: provisioning-scripts
          mountPath: /opt/provisioning
      volumes:
        - name: provisioning-scripts
          configMap:
            name: provisioning-scripts
