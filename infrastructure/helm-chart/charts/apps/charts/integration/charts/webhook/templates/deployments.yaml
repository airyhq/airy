apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-consumer
  namespace: {{ .Values.global.namespace }}
  labels:
    app: webhook-consumer
    type: webhook
    core.airy.co/managed: "true"
    core.airy.co/mandatory: "{{ .Values.mandatory }}"
    core.airy.co/component: "{{ .Values.component }}"
spec:
  replicas: 0
  selector:
    matchLabels:
      app: webhook-consumer
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: webhook-consumer
    spec:
      containers:
      - name: app
        image: "{{ .Values.global.containerRegistry}}/{{ .Values.imageConsumer }}:{{ .Values.global.appImageTag }}"
        imagePullPolicy: Always
        env:
        - name: SERVICE_NAME
          value: webhook-consumer
        - name: REDIS_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: REDIS_HOSTNAME
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: REDIS_PORT
        - name: WEBHOOK_NAME
          valueFrom:
            configMapKeyRef:
              name: webhooks-config
              key: NAME
        livenessProbe:
            httpGet:
              path: /health
              port: 8080
              httpHeaders:
                - name: Health-Check
                  value: health-check
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 3
      initContainers:
      - name: wait
        image: busybox
        command: ["/bin/sh", "/opt/provisioning/wait-for-service.sh"]
        env:
        - name: SERVICE_NAME
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: REDIS_HOSTNAME
        - name: SERVICE_PORT
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: REDIS_PORT
        volumeMounts:
        - name: provisioning-scripts
          mountPath: /opt/provisioning
      volumes:
        - name: provisioning-scripts
          configMap:
            name: provisioning-scripts
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-publisher
  namespace: {{ .Values.global.namespace }}
  labels:
    app: webhook-publisher
    type: webhook
    core.airy.co/managed: "true"
    core.airy.co/mandatory: "{{ .Values.mandatory }}"
    core.airy.co/component: "{{ .Values.component }}"
  annotations:
    core.airy.co/config-items-optional: "WEBHOOK_NAME"
spec:
  replicas: 0
  selector:
    matchLabels:
      app: webhook-publisher
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: webhook-publisher
    spec:
      containers:
      - name: app
        image: "{{ .Values.global.containerRegistry}}/{{ .Values.imagePublisher }}:{{ .Values.global.appImageTag }}"
        imagePullPolicy: Always
        env:
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: KAFKA_BROKERS
        - name: KAFKA_SCHEMA_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: KAFKA_SCHEMA_REGISTRY_URL
        - name: KAFKA_COMMIT_INTERVAL_MS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: KAFKA_COMMIT_INTERVAL_MS
        - name: SERVICE_NAME
          value: webhook-publisher
        - name: REDIS_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: REDIS_HOSTNAME
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: REDIS_PORT
        - name: WEBHOOK_NAME
          valueFrom:
            configMapKeyRef:
              name: webhooks-config
              key: NAME
        livenessProbe:
          tcpSocket:
            port: 6000
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 3
      initContainers:
      - name: wait
        image: busybox
        command: ["/bin/sh", "/opt/provisioning/wait-for-minimum-kafkas.sh"]
        env:
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: KAFKA_BROKERS
        - name: REPLICAS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: KAFKA_MINIMUM_REPLICAS
        volumeMounts:
        - name: provisioning-scripts
          mountPath: /opt/provisioning
      volumes:
        - name: provisioning-scripts
          configMap:
            name: provisioning-scripts
