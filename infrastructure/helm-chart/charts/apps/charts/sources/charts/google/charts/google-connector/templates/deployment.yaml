apiVersion: apps/v1
kind: Deployment
metadata:
  name: sources-google-connector
  namespace: {{ .Values.global.namespace }}
  labels:
    app: sources-google-connector
    type: sources
    core.airy.co/managed: "true"
spec:
  replicas: 0
  selector:
    matchLabels:
      app: sources-google-connector
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sources-google-connector
    spec:
      containers:
        - name: app
          image: '{{ .Values.global.containerRegistry}}/{{ .Values.image }}:{{ .Values.global.appImageTag }}'
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: api-config
          env:
            - name: KAFKA_BROKERS
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: KAFKA_BROKERS
            - name: KAFKA_SCHEMA_REGISTRY_URL
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: KAFKA_SCHEMA_REGISTRY_URL
            - name: KAFKA_COMMIT_INTERVAL_MS
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: KAFKA_COMMIT_INTERVAL_MS
            - name: GOOGLE_SA_FILE
              valueFrom:
                configMapKeyRef:
                  name: sources-google
                  key: GOOGLE_SA_FILE
            - name: GOOGLE_PARTNER_KEY
              valueFrom:
                configMapKeyRef:
                  name: sources-google
                  key: GOOGLE_PARTNER_KEY
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
              httpHeaders:
              - name: Health-Check
                value: health-check
            initialDelaySeconds: 60
      initContainers:
      - name: wait
        image: busybox
        command: ["/bin/sh", "/opt/provisioning/wait-for-minimum-kafkas.sh"]
        env:
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: KAFKA_BROKERS
        - name: REPLICAS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: KAFKA_MINIMUM_REPLICAS
        volumeMounts:
          - name: provisioning-scripts
            mountPath: /opt/provisioning
      volumes:
        - name: provisioning-scripts
          configMap:
            name: provisioning-scripts
