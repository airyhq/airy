apiVersion: apps/v1
kind: Deployment
metadata:
  name: sources-twilio-connector
  namespace: {{ .Values.global.namespace }}
  labels:
    app: sources-twilio-connector
    type: sources
    core.airy.co/managed: "true"
spec:
  replicas: 0
  selector:
    matchLabels:
      app: sources-twilio-connector
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sources-twilio-connector
    spec:
      containers:
        - name: app
          image: "{{ .Values.global.containerRegistry}}/{{ .Values.image }}:{{ .Values.global.appImageTag }}"
          imagePullPolicy: Always
          env:
          - name: KAFKA_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-config
                key: KAFKA_BROKERS
          - name: KAFKA_SCHEMA_REGISTRY_URL
            valueFrom:
              configMapKeyRef:
                name: kafka-config
                key: KAFKA_SCHEMA_REGISTRY_URL
          - name: KAFKA_COMMIT_INTERVAL_MS
            valueFrom:
              configMapKeyRef:
                name: kafka-config
                key: KAFKA_COMMIT_INTERVAL_MS
          - name: TWILIO_AUTH_TOKEN
            valueFrom:
              configMapKeyRef:
                name: sources-twilio
                key: TWILIO_AUTH_TOKEN
          - name: TWILIO_ACCOUNT_SID
            valueFrom:
              configMapKeyRef:
                name: sources-twilio
                key: TWILIO_ACCOUNT_SID
          - name: JWT_SECRET
            valueFrom:
              configMapKeyRef:
                name: api-config
                key: JWT_SECRET
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
              httpHeaders:
              - name: Health-Check
                value: health-check
            initialDelaySeconds: 60
{{ if .Values.global.ngrokEnabled }}
        - name: ngrok
          command:
            - /bin/bash
            - -c
            - /usr/local/bin/ngrok -config=/etc/ngrok/config.yml -log=stdout -subdomain="tw-${CORE_ID}" 8080
          image: ghcr.io/airyhq/infrastructure/ngrok-client:latest
          env:
            - name: CORE_ID
              valueFrom:
                configMapKeyRef:
                  name: core-config
                  key: CORE_ID
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - mountPath: /etc/ngrok
              name: ngrok-client-config
{{ end }}
      initContainers:
      - name: wait
        image: busybox
        command: ["/bin/sh", "/opt/provisioning/wait-for-minimum-kafkas.sh"]
        env:
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: KAFKA_BROKERS
        - name: REPLICAS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: KAFKA_MINIMUM_REPLICAS
        volumeMounts:
          - name: provisioning-scripts
            mountPath: /opt/provisioning
      volumes:
        - name: provisioning-scripts
          configMap:
            name: provisioning-scripts
{{ if .Values.global.ngrokEnabled }}
        - name: ngrok-client-config
          configMap:
            name: ngrok-client-config
{{ end }}
