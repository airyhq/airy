apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  serviceName: redis
  template:
    metadata:
      labels:
        app: redis
    spec:      
      terminationGracePeriodSeconds: 10
      containers:
        - name: redis
          image: "redis:{{ .Values.version }}"
          imagePullPolicy: "IfNotPresent"
          command:
            - "redis-server"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
          ports:
            - name: redis
              containerPort: {{ .Values.port }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.port }}
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          resources: {{ .Values.resources }}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.storage }}
