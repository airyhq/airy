apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.components.api.admin.name }}"
  labels:
    app: "{{ .Values.components.api.admin.name }}"
    type: api
    core.airy.co/managed: "true"
    core.airy.co/mandatory: "{{ .Values.components.api.admin.mandatory }}"
    core.airy.co/component: "{{ .Values.components.api.admin.name }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.components.api.admin.name }}"
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: "{{ .Values.components.api.admin.name }}"
        WorkerType: "{{ default "NodeGroup" .Values.global.workerType }}"
    spec:
      containers:
      - name: app
        image: "{{ .Values.global.containerRegistry}}/{{ .Values.components.api.admin.image }}:{{ default .Chart.Version .Values.global.appImageTag }}"
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: kafka-config
          - configMapRef:
              name: security
          - configMapRef:
              name: core-config
          - configMapRef:
              name: "{{ .Values.components.api.admin.name }}"
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_REST_UPSTREAM_HOST
          value: "schema-registry"
        - name: KAFKA_REST_UPSTREAM_PORT
          value: "8082"
        - name: KUBERNETES_APP
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app']
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
            httpHeaders:
            - name: Health-Check
              value: health-check
          initialDelaySeconds: 120
          periodSeconds: 10
          failureThreshold: 3
{{ if .Values.global.kafkaCertAuth }}
        volumeMounts:
        - name: kafka-config-certs
          mountPath: /opt/kafka/certs
{{ end }}
        resources:
{{ toYaml .Values.components.api.admin.resources | indent 10 }}
      initContainers:
      - name: wait
        image: "{{ .Values.global.busyboxImage }}"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "/opt/provisioning/wait-for-minimum-kafkas.sh"]
        envFrom:
          - configMapRef:
              name: kafka-config
        volumeMounts:
        - name: provisioning-scripts
          mountPath: /opt/provisioning
      volumes:
        - name: provisioning-scripts
          configMap:
            name: provisioning-scripts
{{ if .Values.global.kafkaCertAuth }}
        - name: kafka-config-certs
          configMap:
            name: kafka-config-certs
{{ end }}