apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.components.api.components.installer.name }}
  labels:
    app: {{ .Values.components.api.components.installer.name }}
    core.airy.co/managed: "true"
    core.airy.co/mandatory: "{{ .Values.components.api.components.installer.mandatory }}"
    core.airy.co/component: {{ .Values.components.api.components.installer.name }}
spec:
  replicas: {{ if .Values.components.api.components.installer.enabled }} 1 {{ else }} 0 {{ end }}
  selector:
    matchLabels:
      app: {{ .Values.components.api.components.installer.name }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.components.api.components.installer.name }}
    spec:
      containers:
      - name: app
        image: "{{ .Values.global.containerRegistry}}/{{ .Values.components.api.components.installer.image }}:{{ default .Chart.Version }}"
        imagePullPolicy: Always
        args:
          - "-Djdk.tls.client.protocols=TLSv1.2"
          - "-jar"
          - "app_springboot.jar"
          - "-XshowSettings:vm"
          - "-XX:MaxRAMPercentage=70"
          - "-XX:-UseCompressedOops"
          - "-Dsun.net.inetaddr.ttl=0"
        envFrom:
          - configMapRef:
              name: security
          - configMapRef:
              name: kafka-config
        env:
          - name: SERVICE_NAME
            value: {{ .Values.components.api.components.installer.name }}
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CATALOG_URI
            value: "https://github.com/airyhq/catalog.git"
          - name: CATALOG_DIRECTORY
            value: "/repo"
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: REQUESTED_CPU
            valueFrom:
              resourceFieldRef:
                containerName: app
                resource: requests.cpu
          - name: LIMIT_CPU
            valueFrom:
              resourceFieldRef:
                containerName: app
                resource: limits.cpu
          - name: LIMIT_MEMORY
            valueFrom:
              resourceFieldRef:
                containerName: app
                resource: limits.memory
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
            httpHeaders:
              - name: Health-Check
                value: health-check
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 3
{{ if .Values.global.kafkaCertAuth }}
        volumeMounts:
        - name: kafka-config-certs
          mountPath: /opt/kafka/certs
{{ end }}
        resources:
{{ toYaml .Values.components.api.components.installer.resources | indent 10 }}
      initContainers:
      - name: wait
        image: "{{ .Values.global.busyboxImage }}"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "/opt/provisioning/wait-for-minimum-kafkas.sh"]
        envFrom:
          - configMapRef:
              name: kafka-config
        volumeMounts:
        - name: provisioning-scripts
          mountPath: /opt/provisioning
      serviceAccountName: {{ .Values.serviceAccount }}
      volumes:
        - name: {{ .Values.components.api.components.installer.name }}
          configMap:
            name: {{ .Values.components.api.components.installer.name }}
        - name: provisioning-scripts
          configMap:
            name: provisioning-scripts
{{ if .Values.global.kafkaCertAuth }}
        - name: kafka-config-certs
          configMap:
            name: kafka-config-certs
{{ end }}