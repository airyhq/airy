---
# Source: helm-charts/charts/zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: zookeeper-pdb
  labels:
    app: zookeeper
    chart: zookeeper-0.1.0
    release: RELEASE-NAME
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: zookeeper
      release: RELEASE-NAME
  maxUnavailable: 1
---
# Source: helm-charts/charts/postgres/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
data:
  POSTGRES_DB: admin
  POSTGRES_USER: postgresadmin
  POSTGRES_PASSWORD: <pg_password>
---
# Source: helm-charts/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster
data:
  update-node.sh: |
    #!/bin/sh
    REDIS_NODES="/data/nodes.conf"
    sed -i -e "/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/${POD_IP}/" ${REDIS_NODES}
    exec "$@"
  redis.conf: |+
    cluster-enabled no
    cluster-require-full-coverage no
    cluster-node-timeout 15000
    cluster-config-file /data/nodes.conf
    cluster-migration-barrier 1
    appendonly yes
    protected-mode no
---
# Source: helm-charts/charts/postgres/templates/persistent-volume.yaml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: postgres-pv-volume
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data"
---
# Source: helm-charts/charts/postgres/templates/persistent-volume.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-pv-claim
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
# Source: helm-charts/charts/api-admin/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: api-admin
  namespace: default
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    app: api-admin
---
# Source: helm-charts/charts/api-auth/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: api-auth
  namespace: default
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    app: api-auth
---
# Source: helm-charts/charts/api-communication/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: api-communication
  namespace: default
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    app: api-communication
---
# Source: helm-charts/charts/frontend-demo/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: frontend-demo
  namespace: default
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  type: NodePort
  selector:
    app: frontend-demo
---
# Source: helm-charts/charts/kafka/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-broker-headless
  labels:
    app: kafka
    chart: kafka-0.1.0
    release: RELEASE-NAME
    heritage: Helm
spec:
  ports:
    - port: 9092
      name: broker
  clusterIP: None
  selector:
    app: kafka
    release: RELEASE-NAME
---
# Source: helm-charts/charts/kafka/templates/nodeport-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-broker-0-nodeport
  labels:
    app: kafka
    chart: kafka-0.1.0
    release: RELEASE-NAME
    heritage: Helm
    pod: kafka-broker-0
spec:
  type: NodePort
  ports:
    - name: external-broker
      port: 19092
      targetPort: 31090
      nodePort: 31090
      protocol: TCP
  selector:
    app: kafka
    release: RELEASE-NAME
    statefulset.kubernetes.io/pod-name: "kafka-broker-0"
---
# Source: helm-charts/charts/kafka/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-broker
  labels:
    app: kafka
    chart: kafka-0.1.0
    release: RELEASE-NAME
    heritage: Helm
spec:
  ports:
    - port: 9092
      name: broker
  selector:
    app: kafka
    release: RELEASE-NAME
---
# Source: helm-charts/charts/postgres/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
   - port: 5432
  selector:
   app: postgres
---
# Source: helm-charts/charts/redis/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    name: client
  - port: 16379
    targetPort: 16379
    name: gossip
  selector:
    app: redis-cluster
---
# Source: helm-charts/charts/schema-registry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: schema-registry
  labels:
    app: schema-registry
    chart: schema-registry-0.1.0
    release: RELEASE-NAME
    heritage: Helm
spec:
  ports:
    - name: schema-registry
      port: 8081
  selector:
    app: schema-registry
    release: RELEASE-NAME
---
# Source: helm-charts/charts/sources-chatplugin/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sources-chatplugin
  namespace: default
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    app: sources-chatplugin
---
# Source: helm-charts/charts/sources-facebook-events-router/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sources-facebook-events-router
  namespace: default
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    app: sources-facebook-events-router
---
# Source: helm-charts/charts/sources-facebook-sender/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sources-facebook-sender
  namespace: default
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    app: sources-facebook-sender
---
# Source: helm-charts/charts/sources-facebook-webhook/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sources-facebook-webhook
  namespace: default
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    app: sources-facebook-webhook
---
# Source: helm-charts/charts/webhook-consumer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: webhook-consumer
  namespace: default
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    app: webhook-consumer
---
# Source: helm-charts/charts/webhook-publisher/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: webhook-publisher
  namespace: default
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    app: webhook-publisher
---
# Source: helm-charts/charts/zookeeper/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-headless
  labels:
    app: zookeeper
    chart: zookeeper-0.1.0
    release: RELEASE-NAME
    heritage: Helm
spec:
  ports:
    - port: 2888
      name: server
    - port: 3888
      name: leader-election
  clusterIP: None
  selector:
    app: zookeeper
    release: RELEASE-NAME
---
# Source: helm-charts/charts/zookeeper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-0.1.0
    release: RELEASE-NAME
    heritage: Helm
spec:
  type: 
  ports:
    - port: 2181
      name: client
  selector:
    app: zookeeper
    release: RELEASE-NAME
---
# Source: helm-charts/charts/api-admin/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-admin
  namespace: default
  labels:
    app: api-admin
spec:
  replicas: 0
  selector:
    matchLabels:
      app: api-admin
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: api-admin
    spec:
      containers:
      - name: app
        image: "ghcr.io/airyhq/api/admin:"
        imagePullPolicy: Always
        env:
        - name: KAFKA_BROKERS
          value: kafka-headless:9092
        - name: KAFKA_SCHEMA_REGISTRY_URL
          value: http://schema-registry:8081
        - name: FACEBOOK_APP_ID
          valueFrom:
            configMapKeyRef:
              name: user-config
              key: FB_APP_ID
        - name: FACEBOOK_APP_SECRET
          valueFrom:
            configMapKeyRef:
              name: user-config
              key: FB_APP_SECRET
        - name: SERVICE_NAME
          value: api-admin
        - name: JWT_SECRET
          valueFrom:
            configMapKeyRef:
              name: secrets-config
              key: JWT_SECRET
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
            httpHeaders:
            - name: Health-Check
              value: health-check
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 3
---
# Source: helm-charts/charts/api-auth/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-auth
  namespace: default
  labels:
    app: api-auth
spec:
  replicas: 0
  selector:
    matchLabels:
      app: api-auth
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: api-auth
    spec:
      containers:
      - name: app
        image: "ghcr.io/airyhq/api/auth:"
        imagePullPolicy: Always
        env:
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: DB_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_PASSWORD
        - name: DB_ENDPOINT
          value: postgres:5432
        - name: JWT_SECRET
          valueFrom:
            configMapKeyRef:
              name: secrets-config
              key: JWT_SECRET
        - name: MAIL_URL
          valueFrom:
            configMapKeyRef:
              name: user-config
              key: MAIL_URL
        - name: MAIL_PORT
          valueFrom:
            configMapKeyRef:
              name: user-config
              key: MAIL_PORT
        - name: MAIL_USERNAME
          valueFrom:
            configMapKeyRef:
              name: user-config
              key: MAIL_USERNAME
        - name: MAIL_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: user-config
              key: MAIL_PASSWORD
        - name: MAIL_FROM
          valueFrom:
            configMapKeyRef:
              name: user-config
              key: MAIL_FROM
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
            httpHeaders:
              - name: Health-Check
                value: health-check
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 3
---
# Source: helm-charts/charts/api-communication/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-communication
  namespace: default
  labels:
    app: api-communication
spec:
  replicas: 0
  selector:
    matchLabels:
      app: api-communication
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: api-communication
    spec:
      containers:
      - name: app
        image: "ghcr.io/airyhq/api/communication:"
        imagePullPolicy: Always
        env:
        - name: KAFKA_BROKERS
          value: kafka-headless:9092
        - name: KAFKA_SCHEMA_REGISTRY_URL
          value: http://schema-registry:8081
        - name: SERVICE_NAME
          value: api-communication
        - name: JWT_SECRET
          valueFrom:
            configMapKeyRef:
              name: secrets-config
              key: JWT_SECRET
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
            httpHeaders:
            - name: Health-Check
              value: health-check
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 3
---
# Source: helm-charts/charts/frontend-demo/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-demo
  namespace: default
  labels:
    app: frontend-demo
spec:
  replicas: 0
  selector:
    matchLabels:
      app: frontend-demo
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: frontend-demo
    spec:
      containers:
      - name: app
        image: "ghcr.io/airyhq/frontend/demo:"
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /health
            port: 80
            httpHeaders:
            - name: Health-Check
              value: health-check
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 3
---
# Source: helm-charts/charts/postgres/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
        matchLabels:
          app: postgres
  replicas: 0
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: "ghcr.io/airyhq/postgres:"
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
      volumes:
        - name: postgredb
          persistentVolumeClaim:
            claimName: postgres-pv-claim
---
# Source: helm-charts/charts/schema-registry/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: schema-registry
  labels:
    app: schema-registry
    chart: schema-registry-0.1.0
    release: RELEASE-NAME
    heritage: Helm
spec:
  replicas: 0
  selector:
    matchLabels:
      app: schema-registry
      release: RELEASE-NAME
  template:
    metadata:
      labels:
        app: schema-registry
        release: RELEASE-NAME
    spec:
      containers:
        - name: schema-registry-server
          image: "confluentinc/cp-schema-registry:5.5.0"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: schema-registry
              containerPort: 8081
              protocol: TCP
          resources:
            {}
          env:
          - name: SCHEMA_REGISTRY_HOST_NAME
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SCHEMA_REGISTRY_LISTENERS
            value: http://0.0.0.0:8081
          - name: SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS
            value: PLAINTEXT://kafka-broker-headless:9092
          - name: SCHEMA_REGISTRY_KAFKASTORE_GROUP_ID
            value: RELEASE-NAME
          - name: SCHEMA_REGISTRY_MASTER_ELIGIBILITY
            value: "true"
          - name: SCHEMA_REGISTRY_HEAP_OPTS
            value: "-Xms512M -Xmx512M"
          
      volumes:
---
# Source: helm-charts/charts/sources-chatplugin/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sources-chatplugin
  namespace: default
  labels:
    app: sources-chatplugin
spec:
  replicas: 0
  selector:
    matchLabels:
      app: sources-chatplugin
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sources-chatplugin
    spec:
      containers:
      - name: app
        image: "ghcr.io/airyhq/sources/chatplugin:"
        imagePullPolicy: Always
        env:
        - name: JWT_SECRET
          valueFrom:
            configMapKeyRef:
              name: secrets-config
              key: JWT_SECRET
        - name: KAFKA_BROKERS
          value: kafka-headless:9092
        - name: KAFKA_SCHEMA_REGISTRY_URL
          value: http://schema-registry:8081
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
            httpHeaders:
              - name: Health-Check
                value: health-check
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 3
---
# Source: helm-charts/charts/sources-facebook-events-router/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sources-facebook-events-router
  namespace: default
  labels:
    app: sources-facebook-events-router
spec:
  replicas: 0
  selector:
    matchLabels:
      app: sources-facebook-events-router
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sources-facebook-events-router
    spec:
      containers:
      - name: app
        image: "ghcr.io/airyhq/sources/facebook-events-router:"
        imagePullPolicy: Always
        env:
        - name: KAFKA_BROKERS
          value: kafka-headless:9092
        - name: KAFKA_SCHEMA_REGISTRY_URL
          value: http://schema-registry:8081
        - name: FB_APP_ID
          valueFrom:
            configMapKeyRef:
              name: user-config
              key: FB_APP_ID
        - name: SERVICE_NAME
          value: facebook-events-router
        livenessProbe:
          tcpSocket:
            port: 6000
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 3
---
# Source: helm-charts/charts/sources-facebook-sender/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sources-facebook-sender
  namespace: default
  labels:
    app: sources-facebook-sender
spec:
  replicas: 0
  selector:
    matchLabels:
      app: sources-facebook-sender
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sources-facebook-sender
    spec:
      containers:
      - name: app
        image: "ghcr.io/airyhq/sources/facebook-sender:"
        imagePullPolicy: Always
        env:
        - name: KAFKA_BROKERS
          value: kafka-headless:9092
        - name: KAFKA_SCHEMA_REGISTRY_URL
          value: http://schema-registry:8081
        - name: SERVICE_NAME
          value: facebook-sender
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
            httpHeaders:
              - name: Health-Check
                value: health-check
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 3
---
# Source: helm-charts/charts/sources-facebook-webhook/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sources-facebook-webhook
  namespace: default
  labels:
    app: sources-facebook-webhook
spec:
  replicas: 0
  selector:
    matchLabels:
      app: sources-facebook-webhook
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sources-facebook-webhook
    spec:
      containers:
        - name: app
          image: "ghcr.io/airyhq/webhook/consumer:"
          imagePullPolicy: Always
          env:
            - name: KAFKA_BROKERS
              value: kafka-headless:9092
            - name: KAFKA_SCHEMA_REGISTRY_URL
              value: http://schema-registry:8081
            - name: SERVICE_NAME
              value: sources-facebook-webhook
            - name: FB_WEBHOOK_SECRET
              valueFrom:
                configMapKeyRef:
                  name: user-config
                  key: FB_WEBHOOK_SECRET
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
              httpHeaders:
                - name: Health-Check
                  value: health-check
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 3

        - name: ngrok
          command:
            - /bin/bash
            - -c
            - /usr/local/bin/ngrok -config=/etc/ngrok/config.yml -log=stdout -subdomain="$WEBHOOK_SUBDOMAIN" 8080
          image: ghcr.io/airyhq/infrastructure/ngrok-client:latest
          env:
            - name: WEBHOOK_SUBDOMAIN
              valueFrom:
                configMapKeyRef:
                  name: public-urls
                  key: FACEBOOK_WEBHOOK_PUBLIC_URL
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - mountPath: /etc/ngrok
              name: ngrok-client-config
      volumes:
        - name: ngrok-client-config
          configMap:
            name: ngrok-client-config
---
# Source: helm-charts/charts/sources-google-events-router/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sources-google-events-router
  namespace: default
  labels:
    app: sources-google-events-router
spec:
  replicas: 0
  selector:
    matchLabels:
      app: sources-google-events-router
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sources-google-events-router
    spec:
      containers:
      - name: app
        image: "ghcr.io/airyhq/sources/google-events-router:"
        imagePullPolicy: Always
        env:
        - name: KAFKA_BROKERS
          value: airy-cp-kafka-headless:9092
        - name: KAFKA_SCHEMA_REGISTRY_URL
          value: http://airy-cp-schema-registry:8081
        livenessProbe:
          tcpSocket:
            port: 6000
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 3
---
# Source: helm-charts/charts/sources-google-sender/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sources-google-webhook
  namespace: default
  labels:
    app: sources-google-webhook
spec:
  replicas: 0
  selector:
    matchLabels:
      app: sources-google-webhook
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sources-google-webhook
    spec:
      containers:
        - name: app
          image: "ghcr.io/airyhq/sources/google-sender:"
          imagePullPolicy: Always
          env:
            - name: KAFKA_BROKERS
              value: airy-cp-kafka-headless:9092
            - name: KAFKA_SCHEMA_REGISTRY_URL
              value: http://airy-cp-schema-registry:8081
            - name: SERVICE_NAME
              value: sources-google-webhook
            - name: GOOGLE_PARTNER_KEY
              valueFrom:
                configMapKeyRef:
                  name: user-config
                  key: GOOGLE_PARTNER_KEY
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
              httpHeaders:
                - name: Health-Check
                  value: health-check
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 3
        - name: ngrok
          command:
            - /bin/bash
            - -c
            - /usr/local/bin/ngrok -config=/etc/ngrok/config.yml -log=stdout -subdomain="$WEBHOOK_SUBDOMAIN" 8080
          image: infrastructure/ngrok-client:latest
          env:
            - name: WEBHOOK_SUBDOMAIN
              valueFrom:
                configMapKeyRef:
                  name: public-urls
                  key: GOOGLE_WEBHOOK_PUBLIC_URL
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - mountPath: /etc/ngrok
              name: ngrok-client-config
      volumes:
        - name: ngrok-client-config
          configMap:
            name: ngrok-client-config
---
# Source: helm-charts/charts/webhook-consumer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-consumer
  namespace: default
  labels:
    app: webhook-consumer
spec:
  replicas: 0
  selector:
    matchLabels:
      app: webhook-consumer
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: webhook-consumer
    spec:
      containers:
      - name: app
        image: "ghcr.io/airyhq/webhook/consumer:"
        imagePullPolicy: Always
        env:
        - name: KAFKA_BROKERS
          value: kafka-headless:9092
        - name: KAFKA_SCHEMA_REGISTRY_URL
          value: http://schema-registry:8081
        - name: SERVICE_NAME
          value: webhook-consumer
        - name: REDIS_HOSTNAME
          value: redis-cluster
        - name: REDIS_PORT
          value: "6379"
        livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
              httpHeaders:
                - name: Health-Check
                  value: health-check
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 3
---
# Source: helm-charts/charts/webhook-publisher/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-publisher
  namespace: default
  labels:
    app: webhook-publisher
spec:
  replicas: 0
  selector:
    matchLabels:
      app: webhook-publisher
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: webhook-publisher
    spec:
      containers:
      - name: app
        image: "ghcr.io/airyhq/webhook/publisher:"
        imagePullPolicy: Always
        env:
        - name: KAFKA_BROKERS
          value: kafka-headless:9092
        - name: KAFKA_SCHEMA_REGISTRY_URL
          value: http://schema-registry:8081
        - name: SERVICE_NAME
          value: webhook-publisher
        - name: REDIS_HOSTNAME
          value: redis-cluster
        - name: REDIS_PORT
          value: "6379"
        livenessProbe:
          tcpSocket:
            port: 6000
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 3
---
# Source: helm-charts/charts/kafka/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-broker
  labels:
    app: kafka
    chart: kafka-0.1.0
    release: RELEASE-NAME
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: kafka
      release: RELEASE-NAME
  serviceName: kafka-broker-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kafka
        release: RELEASE-NAME
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - kafka
                  - key: "release"
                    operator: In
                    values:
                    - RELEASE-NAME
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: kafka-broker
        image: "confluentinc/cp-kafka:5.5.0"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 31090
          name: nodeport-0
        resources:
          {}
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_HEAP_OPTS
          value: -Xms512M -Xmx512M
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-headless:2181"
        - name: KAFKA_LOG_DIRS
          value: "/opt/kafka/data-0/logs"
        - name: KAFKA_METRIC_REPORTERS
          value: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
        - name: CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS
          value: "PLAINTEXT://kafka-headless:9092"
        - name: "KAFKA_ADVERTISED_LISTENERS"
          value: "EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID}))"
        - name: "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP"
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: "KAFKA_LOG_RETENTION_HOURS"
          value: "-1"
        - name: "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR"
          value: "1"
        - name: "KAFKA_METRIC_REPORTERS"
          value: ""
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_NAME}.kafka-broker-headless.${POD_NAMESPACE}:9092,EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID})) && \
          exec /etc/confluent/docker/run
        volumeMounts:
          - name: datadir-0
            mountPath: /opt/kafka/data-0
      volumes:
  volumeClaimTemplates:
  - metadata:
      name: datadir-0
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "5Gi"
---
# Source: helm-charts/charts/redis/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
spec:
  serviceName: redis-cluster
  replicas: 0
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: "ghcr.io/airyhq/redis:"
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        command: ["/conf/update-node.sh", "redis-server", "/conf/redis.conf"]
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: conf
          mountPath: /conf
          readOnly: false
        - name: data
          mountPath: /data
          readOnly: false
      volumes:
      - name: conf
        configMap:
          name: redis-cluster
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
# Source: helm-charts/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-0.1.0
    release: RELEASE-NAME
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: zookeeper
      release: RELEASE-NAME
  serviceName: zookeeper-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: zookeeper
        release: RELEASE-NAME
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - zookeeper
                  - key: "release"
                    operator: In
                    values:
                    - RELEASE-NAME
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: zookeeper-server
        image: "confluentinc/cp-zookeeper:5.5.0"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        resources:
          {}
        env:
        - name : KAFKA_HEAP_OPTS
          value: "-Xms512M -Xmx512M"
        - name : ZOOKEEPER_TICK_TIME
          value: "2000"
        - name : ZOOKEEPER_SYNC_LIMIT
          value: "5"
        - name : ZOOKEEPER_INIT_LIMIT
          value: "10"
        - name : ZOOKEEPER_MAX_CLIENT_CNXNS
          value: "60"
        - name : ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT
          value: "3"
        - name : ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL
          value: "24"
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name : ZOOKEEPER_SERVERS
          value: "zookeeper-0.zookeeper-headless.default:2888:3888"
        # ZOOKEEPER_SERVER_ID is required just to pass zookeeper ensure script for env check,
        # the value(metadata.mame) is not used and will be overwritten in command part
        - name: ZOOKEEPER_SERVER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - "bash"
        - "-c"
        - |
          ZK_FIX_HOST_REGEX="s/${HOSTNAME}\.[^:]*:/0.0.0.0:/g"
          ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-}+1)) \
          ZOOKEEPER_SERVERS=`echo $ZOOKEEPER_SERVERS | sed -e "$ZK_FIX_HOST_REGEX"` \
          /etc/confluent/docker/run
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper/data
        - name: datalogdir
          mountPath: /var/lib/zookeeper/log
      volumes:
      
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "10Gi"
  - metadata:
      name: datalogdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "10Gi"
